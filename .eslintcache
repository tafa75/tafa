[{"/home/tafa/Desktop/gest_hosp_front/src/reportWebVitals.js":"1","/home/tafa/Desktop/gest_hosp_front/src/App.js":"2","/home/tafa/Desktop/gest_hosp_front/src/components/Profile/Profile.js":"3","/home/tafa/Desktop/gest_hosp_front/src/components/Login/Login2.js":"4","/home/tafa/Desktop/gest_hosp_front/src/components/Admin/CreateUserForm.js":"5","/home/tafa/Desktop/gest_hosp_front/src/components/Records/ModalPage.js":"6","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/SampleCollection.js":"7","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/Lab.js":"8","/home/tafa/Desktop/gest_hosp_front/src/components/Records/EditModal.js":"9","/home/tafa/Desktop/gest_hosp_front/src/components/Records/Patientlist.js":"10","/home/tafa/Desktop/gest_hosp_front/src/components/helpers/helpers.js":"11","/home/tafa/Desktop/gest_hosp_front/src/components/Admin/Users.js":"12","/home/tafa/Desktop/gest_hosp_front/src/components/Admin/Admin.js":"13","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/RequestProcessingForm.js":"14","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/ProcessingSection.js":"15","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/CompletedLabTests.js":"16","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/PathologistComment.js":"17","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/PrintResult.js":"18","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/SampleReception.js":"19","/home/tafa/Desktop/gest_hosp_front/src/components/Records/PatientAssignedToday.js":"20","/home/tafa/Desktop/gest_hosp_front/src/components/Records/DoctorsListModal.js":"21","/home/tafa/Desktop/gest_hosp_front/src/components/PatientForm.js":"22","/home/tafa/Desktop/gest_hosp_front/src/components/loading.js":"23","/home/tafa/Desktop/gest_hosp_front/src/components/Account/ServicesSetupForm.js":"24","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/EditDrugs.js":"25","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/AssignedList.js":"26","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/DressingRequestForm.js":"27","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/PcomplaintsForm.js":"28","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/EditPrescriptionRequest.js":"29","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/SysExaminationEdit.js":"30","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/Pharmacy.js":"31","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/PreviousVisits.js":"32","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/PatientClarking.js":"33","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/NewRadiologyInvestigations.js":"34","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/PendingPharmacyRequest.js":"35","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/AddDrug.js":"36","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/PrescriptionProcessingForm.js":"37","/home/tafa/Desktop/gest_hosp_front/src/nav-old.js":"38","/home/tafa/Desktop/gest_hosp_front/src/error-boundary/MyErrorBoundary.js":"39","/home/tafa/Desktop/gest_hosp_front/src/components/Account/Account.js":"40","/home/tafa/Desktop/gest_hosp_front/src/components/Records/RenderPatientList.js":"41","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/Diagnosis.js":"42","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/DispensaryTable.js":"43","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/ObservationRequestForm.js":"44","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/DiagnosticCode.js":"45","/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/NewProblems.js":"46","/home/tafa/Desktop/gest_hosp_front/src/components/landing.js":"47","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/PharmacyDashboard.js":"48","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/SalesReport.js":"49","/home/tafa/Desktop/gest_hosp_front/src/components/Admin/AdminDashboard.js":"50","/home/tafa/Desktop/gest_hosp_front/src/components/Records/PatientTable.js":"51","/home/tafa/Desktop/gest_hosp_front/src/components/Records/SearchBar.js":"52","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/LabDashboard.js":"53","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/LaboratorySetupForms.js":"54"},{"size":362,"mtime":1606317529560,"results":"55","hashOfConfig":"56"},{"size":5737,"mtime":1606324350805,"results":"57","hashOfConfig":"56"},{"size":762,"mtime":1606751048285,"results":"58","hashOfConfig":"56"},{"size":1645,"mtime":1606324468849,"results":"59","hashOfConfig":"56"},{"size":7629,"mtime":1606323413122,"results":"60","hashOfConfig":"56"},{"size":15101,"mtime":1606754758964,"results":"61","hashOfConfig":"56"},{"size":4343,"mtime":1606323332414,"results":"62","hashOfConfig":"56"},{"size":2699,"mtime":1606325159242,"results":"63","hashOfConfig":"56"},{"size":11712,"mtime":1606750679911,"results":"64","hashOfConfig":"56"},{"size":7715,"mtime":1606324584297,"results":"65","hashOfConfig":"56"},{"size":4347,"mtime":1606324940513,"results":"66","hashOfConfig":"56"},{"size":1897,"mtime":1606753841991,"results":"67","hashOfConfig":"56"},{"size":1987,"mtime":1606325206462,"results":"68","hashOfConfig":"56"},{"size":3324,"mtime":1606323102834,"results":"69","hashOfConfig":"56"},{"size":12617,"mtime":1606323123230,"results":"70","hashOfConfig":"56"},{"size":2217,"mtime":1606757058847,"results":"71","hashOfConfig":"56"},{"size":3896,"mtime":1606323272654,"results":"72","hashOfConfig":"56"},{"size":4012,"mtime":1606323303138,"results":"73","hashOfConfig":"56"},{"size":3210,"mtime":1606323319418,"results":"74","hashOfConfig":"56"},{"size":3077,"mtime":1606749859202,"results":"75","hashOfConfig":"56"},{"size":4854,"mtime":1606750832811,"results":"76","hashOfConfig":"56"},{"size":1792,"mtime":1606756932959,"results":"77","hashOfConfig":"56"},{"size":453,"mtime":1606324640765,"results":"78","hashOfConfig":"56"},{"size":7864,"mtime":1606319730034,"results":"79","hashOfConfig":"56"},{"size":1774,"mtime":1606752410284,"results":"80","hashOfConfig":"56"},{"size":1841,"mtime":1606320305306,"results":"81","hashOfConfig":"56"},{"size":829,"mtime":1606320369594,"results":"82","hashOfConfig":"56"},{"size":5257,"mtime":1606323649163,"results":"83","hashOfConfig":"56"},{"size":6323,"mtime":1606323711723,"results":"84","hashOfConfig":"56"},{"size":15923,"mtime":1606320666070,"results":"85","hashOfConfig":"56"},{"size":1561,"mtime":1606325085065,"results":"86","hashOfConfig":"56"},{"size":3354,"mtime":1606323620023,"results":"87","hashOfConfig":"56"},{"size":14642,"mtime":1606325041605,"results":"88","hashOfConfig":"56"},{"size":4018,"mtime":1606323693383,"results":"89","hashOfConfig":"56"},{"size":3526,"mtime":1606323856792,"results":"90","hashOfConfig":"56"},{"size":8521,"mtime":1606751356830,"results":"91","hashOfConfig":"56"},{"size":16819,"mtime":1606753153970,"results":"92","hashOfConfig":"56"},{"size":3247,"mtime":1606748962853,"results":"93","hashOfConfig":"56"},{"size":1252,"mtime":1606324250577,"results":"94","hashOfConfig":"56"},{"size":1163,"mtime":1606748113961,"results":"95","hashOfConfig":"56"},{"size":1701,"mtime":1606321706598,"results":"96","hashOfConfig":"56"},{"size":6301,"mtime":1606320341214,"results":"97","hashOfConfig":"56"},{"size":542,"mtime":1606751885467,"results":"98","hashOfConfig":"56"},{"size":458,"mtime":1606320527678,"results":"99","hashOfConfig":"56"},{"size":158,"mtime":1606320352342,"results":"100","hashOfConfig":"56"},{"size":3131,"mtime":1606320497142,"results":"101","hashOfConfig":"56"},{"size":406,"mtime":1606748410225,"results":"102","hashOfConfig":"56"},{"size":3637,"mtime":1606752731909,"results":"103","hashOfConfig":"56"},{"size":1862,"mtime":1606753278498,"results":"104","hashOfConfig":"56"},{"size":2051,"mtime":1606753655278,"results":"105","hashOfConfig":"56"},{"size":2924,"mtime":1606754899716,"results":"106","hashOfConfig":"56"},{"size":647,"mtime":1606754941229,"results":"107","hashOfConfig":"56"},{"size":4417,"mtime":1606757269052,"results":"108","hashOfConfig":"56"},{"size":2228,"mtime":1606757329744,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zpzgt5",{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"142"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tafa/Desktop/gest_hosp_front/src/reportWebVitals.js",[],"/home/tafa/Desktop/gest_hosp_front/src/App.js",["226","227"],"import React, { Component } from \"react\";\nimport PatientClarking from \"./components/Doctor/PatientClarking\";\nimport Pharmacy from \"./components/Pharmacy/Pharmacy\";\nimport Account from \"./components/Account/Account\";\nimport Admin from \"./components/Admin/Admin\";\nimport Patientlist from \"./components/Records/Patientlist\";\nimport Lab from \"./components/Labo/Lab\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink,\n  Switch\n} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Login from \"./components/Login/Login2\";\nimport Navbar from \"./nav-old\";\nimport \"./Style/index.css\";\nimport { _fetchData } from \"./components/helpers/helpers\";\nimport Landing from \"./components/landing\";\nimport ErrorBoundary from \"./error-boundary/MyErrorBoundary\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      msg: \"\",\n      // loggedIn: false,\n      username: \"\",\n      password: \"\",\n      records: true,\n      doctors: true,\n      pharmacy: true,\n      lab: true,\n      insurance: true,\n      account: true,\n      admin: true,\n      users: [],\n      isOpen: false,\n      isLoading: true\n      // landing: true,\n    };\n  }\n\n  // static childContextTypes = {\n  //   username: PropTypes.String,\n  // };\n\n  // getChildContext() {\n  //   return {\n  //     username: this.getUsername(),\n  //   };\n  // }\n\n  // getUsername = () => 'Mustapha';\n\n  componentDidMount() {\n    let user = localStorage.getItem(\"user\");\n    console.log(user);\n    this.setState({ user });\n    // if(user)\n    // this.fetchUsers();\n  }\n\n  //Get all the users from the database\n  fetchUsers = () => {\n    const cb = data => this.setState({ users: data });\n    _fetchData({ route: \"users/usersList\", callback: cb });\n  };\n\n  /**\n   * The username and password validation for the login\n   * is done with the handleLogin method\n   */\n  handleLogin = e => {\n    e.preventDefault();\n\n    if (this.state.username === \"\" || this.state.password === \"\") {\n      return this.setState({ msg: \"Please enter your username and password!\" });\n    } else {\n      // const users = this.state.users;\n      const username = this.state.username.trim();\n      const password = this.state.password.trim();\n\n      if (username === \"user\" && password === \"user\") {\n        localStorage.setItem(\"user\", this.state.username);\n\n        this.setState(prevState => ({\n          // loggedIn: true,\n          records: true,\n          doctors: true,\n          pharmacy: true,\n          lab: true,\n          admin: true,\n          profile: true,\n          user: prevState.username\n        }));\n        // localStorage.setItem('user', this.state.username);\n      } else {\n        this.setState({\n          msg: \"You have entered wrong username or password\"\n        });\n      }\n    }\n  };\n\n  /**\n   * These two methods handleUsernameChange and handlePasswordChange handle the onChange event\n   * of the username and password text fields. They are passed down to the child form\n   * which implements them\n   */\n  handleUsernameChange = e => {\n    this.setState({ username: e.target.value });\n    this.setState({ msg: \"\" });\n  };\n  handlePasswordChange = e => {\n    this.setState({ password: e.target.value });\n    this.setState({ msg: \"\" });\n  };\n\n  logout = () => {\n    const user = localStorage.getItem(\"username\");\n    this.setState({ loggedIn: false, username: \"\" });\n  };\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  toggleLanding = () => this.setState({ landing: false });\n\n  render() {\n    return (\n      <ErrorBoundary>\n        {/* Conditional rendering which check if the user is a valid user or not */}\n        {!this.state.user && (\n          <Login\n            handleLogin={this.handleLogin}\n            message={this.state.msg}\n            username={this.state.username}\n            handleUsernameChange={this.handleUsernameChange}\n            password={this.state.password}\n            handlePasswordChange={this.handlePasswordChange}\n          />\n        )}\n        {this.state.user && (\n          <Router basename={process.env.PUBLIC_URL}>\n            <div>\n              {/* The header goes here */}\n              <Navbar\n                records={this.state.records}\n                doctors={this.state.doctors}\n                pharmacy={this.state.pharmacy}\n                lab={this.state.lab}\n                account={this.state.account}\n                admin={this.state.admin}\n                insurance={this.state.insurance}\n                username={this.state.username}\n                toggleLanding={this.toggleLanding}\n              />\n              <br />\n              {/* ... and the contents go here */}\n              <Switch>\n                <Route exact path=\"/\" component={Landing} />\n                <Route exact path=\"/patientlist\" component={Patientlist} />\n                <Route\n                  exact\n                  path=\"/patient_clarking\"\n                  component={PatientClarking}\n                />\n                <Route exact path=\"/pharmacy\" component={Pharmacy} />\n                <Route exact path=\"/lab\" component={Lab} />\n                <Route exact path=\"/account\" component={Account} />\n                <Route exact path=\"/admin\" component={Admin} />\n          \n                <Route component={PageNotFound} />\n              </Switch>\n            </div>\n          </Router>\n        )}\n        <div className=\"row\">\n          <span\n            className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\"\n            style={{ fontFamily: \"cursive\" }}\n          ></span>\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n\nfunction PageNotFound() {\n  return <h1 style={{ textAlign: \"center\", marginTop: 40 }}>Page not found</h1>;\n\n}\n",["228","229"],"/home/tafa/Desktop/gest_hosp_front/src/components/Profile/Profile.js",["230"],"import React from \"react\";\nimport {\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button\n} from \"reactstrap\";\n\nconst Profile = props => {\n  return (\n    <div>\n      <UncontrolledButtonDropdown>\n        <DropdownToggle>User</DropdownToggle>\n        <DropdownMenu>\n          <Card>\n            <CardImg top width=\"100%\" src=\"#\" alt=\"User Profile Image\" />\n          </Card>\n          <CardBody>\n            <CardTitle> Profile Utilisateur</CardTitle>\n            <CardText>Plus D´infomations</CardText>\n            <Button>Voir Profile</Button>\n          </CardBody>\n        </DropdownMenu>\n      </UncontrolledButtonDropdown>\n    </div>\n  );\n};\n\nexport default Profile;\n","/home/tafa/Desktop/gest_hosp_front/src/components/Login/Login2.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Admin/CreateUserForm.js",["231","232","233","234","235"],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/ModalPage.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/SampleCollection.js",["236","237","238","239"],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/Lab.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/EditModal.js",["240","241","242","243","244"],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/Patientlist.js",["245"],"/home/tafa/Desktop/gest_hosp_front/src/components/helpers/helpers.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Admin/Users.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Admin/Admin.js",["246","247","248"],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/RequestProcessingForm.js",["249","250","251","252","253","254","255","256"],"import React from 'react';\nimport { Card } from 'reactstrap';\nimport {\n  _customNotify,\n  _updateData,\n  _warningNotify,\n  _convertArrOfObjToArr,\n} from '../helpers/helpers';\nimport Notifications from 'react-notify-toast';\nimport ProcessingSection from './ProcessingSection';\n\nexport class RequestProcessingForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userDetails: {},\n      currentReq: {},\n      resultModalOpen: false,\n      previewModalOpen: false,\n      \n    };\n  }\n\n  onInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  saveLabResults = formData => {\n    _customNotify('Results Saved!');\n    this.props.toggleRoute();\n  };\n\n  toggleResultModal = req => {\n    this.setState(prevState => ({\n      resultModalOpen: !prevState.resultModalOpen,\n      currentReq: req,\n    }));\n  };\n\n  togglePreviewModal = () => {\n    this.setState(prevState => ({\n      previewModalOpen: !prevState.previewModalOpen,\n    }));\n  };\n\n  cancel = () => this.props.toggleRoute();\n\n  \n\n  render() {\n    const { req, toggleRoute, mode } = this.props;\n    const {\n      userDetails,\n      resultModalOpen,\n      previewModalOpen,\n      currentReq,\n    } = this.state;\n    // const {\n    //   toggleResultModal,\n    //   togglePreviewModal,\n    //   saveLabResults,\n    //   onStatusChange,\n    //   onStatusUnchanged,\n    //   // onBlurCaptured,\n    // } = this;\n    return (\n      <>\n        <Notifications options={{ zIndex: 200, top: '50px' }} />\n        <PatientInfo req={req} />\n        \n        <br />\n        <ProcessingSection\n          req={req}\n          // resultModalOpen={resultModalOpen}\n          // previewModalOpen={previewModalOpen}\n          // toggleResultModal={toggleResultModal}\n          // togglePreviewModal={togglePreviewModal}\n          // saveLabResults={saveLabResults}\n          // onStatusChange={onStatusChange}\n          // onStatusUnchanged={onStatusUnchanged}\n          // onBlurCaptured={onBlurCaptured}\n          mode={mode}\n          cancel={this.cancel}\n\n          // currentReq={requestForThisPatient}\n        />\n        <br />\n        \n        {/* <button\n          className=\"offset-md-2 offset-lg-2 btn btn-outline-success\"\n          onClick={this.saveChanges}>\n          Save Changes\n        </button> */}\n      </>\n    );\n  }\n}\n\nconst PatientInfo = ({ req }) => {\n  // const flexStyle = { display: 'flex', flexDirection: 'horizontal' };\n\n  return (\n    <Card>\n      <div className=\"row\">\n        <div className=\"col-xs-12 col-sm-12 col-md-6 col-lg-3\">\n          <label style={{ marginRight: '.5em' }}>Names: </label>\n          <span>\n            {req.surname} {req.firstname}\n          </span>\n        </div>\n        <div className=\"col-xs-12 col-sm-12 col-md-6 col-lg-3\">\n          <label style={{ marginRight: '.5em' }}>Gender: </label>\n          <span>{req.gender}</span>\n        </div>\n        {/* </div>\n        <div> */}\n        <div className=\"col-xs-12 col-sm-12 col-md-6 col-lg-3\">\n          <label style={{ marginRight: '.5em' }}>Phone: </label>\n          <span>{req.phoneNo}</span>\n        </div>\n        <div className=\"col-xs-12 col-sm-12 col-md-6 col-lg-3\">\n          <label style={{ marginRight: '.5em' }}>ID: </label>\n          <span>{req.id}</span>\n        </div>\n      </div>\n    </Card>\n  );\n};\n",["257","258"],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/ProcessingSection.js",["259","260","261","262","263"],"import React, { Component, Suspense, lazy } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n} from 'reactstrap';\nimport {\n  _fetchData,\n  _postData,\n  _customNotify,\n  _updateData,\n  _warningNotify,\n} from '../helpers/helpers';\nimport Loading from '../loading';\nconst SampleAnalysis = lazy(() => import('./SampleAnalysis'));\nconst PathologistComment = lazy(() => import('./PathologistComment'));\nconst PendingRequestProcess = lazy(() => import('./PendingRequestProcess'));\n\nexport default class ProcessingSection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      requestForThisPatient: [],\n      testIdArr: [],\n      testResultsArr: [],\n    };\n  }\n\n  fetchData(id, mode) {\n    let route =\n      mode === 'pending'\n        ? `lab/pendingReqById?id=${id}`\n        : mode === 'collected'\n        ? `lab/collectedSamplesById?id=${id}`\n        : mode === 'analyzed'\n        ? `lab/analyzedSamplesById?id=${id}`\n        : null;\n    let success_callback = data =>\n      this.setState({ requestForThisPatient: data });\n    let error_callback = err => this.setState({ requestErr: err });\n    _fetchData({ route, success_callback, error_callback });\n  }\n\n  componentDidMount() {\n    const { mode } = this.props;\n    const { id } = this.props.req;\n    this.fetchData(id, mode);\n  }\n\n  saveId(test_id) {\n    const { testIdArr } = this.state;\n    let newArr = testIdArr.concat(test_id);\n    this.setState({ testIdArr: newArr });\n  }\n\n  removeId(test_id) {\n    const { testIdArr } = this.state;\n    let newArr = testIdArr.filter(id => id !== test_id);\n    this.setState({ testIdArr: newArr });\n  }\n\n  onStatusChange = test_id =>\n    !this.state.testIdArr.includes(test_id) ? this.saveId(test_id) : null;\n\n  onStatusUnchanged = test_id =>\n    this.state.testIdArr.includes(test_id) ? this.removeId(test_id) : null;\n\n  saveLabInvestigation = lab_investigation => {\n    let {\n      appearance,\n      microscopy,\n      culture,\n      antibiotic,\n      test_id,\n    } = lab_investigation;\n\n    // console.log(lab_investigation)\n    // let data = _convertArrOfObjToArr(lab_investigation);\n    let route = 'lab/analyzeSample';\n    let data = { appearance, microscopy, culture, antibiotic, test_id };\n    let callback = () => _customNotify('record submitted');\n    _updateData({ route, data, callback });\n  };\n\n  saveResults = () => {\n    const { testResultsArr } = this.state;\n    // console.log(testResultsArr);\n    // testResultsArr.forEach(test => this.saveLabInvestigation(test));\n    let testIdArr = [];\n    testResultsArr.forEach(res => testIdArr.push(res.test_id))\n    this.autoUpdate(testIdArr)\n  };\n\n  saveCollectedSamples = () => {\n    let data = this.state.testIdArr;\n\n    if (data.length === 0) return _warningNotify('no changes made');\n\n    let route = 'lab/submitSamplesCollected';\n    let cb = () => _customNotify('Record has been submitted successfully.');\n    // _updateData({ route, data, cb });\n    // this.props.updateTable(this.props.req.id);\n    this.autoUpdate(data)\n    console.log(this.state.testIdArr);\n  };\n\n  autoUpdate(testIdArr){\n    let { requestForThisPatient } = this.state;\n    console.log(requestForThisPatient)\n    let newList = [];\n    requestForThisPatient.forEach(req => !testIdArr.includes(req.test_id) ? newList.push(req) : null);\n\n    // for(let i=0; i<testIdArr.length; i++){\n      // requestForThisPatient = requestForThisPatient.filter(req => req.id !== testIdArr[i]);\n      // if(testIdArr[i])\n    // }\n    \n    this.setState({ requestForThisPatient: newList })\n    // console.log(newList)\n  }\n\n  // saveChanges = () => {\n  //   const { mode } = this.props;\n  //   if (mode === 'pending') {\n  //     this.saveCollectedSamples();\n  //   } else if (mode === 'collected') this.saveResults();\n\n  //   // let id = this.props.req.id;\n  //   // this.props.updateTable(id);\n  // };\n\n  onBlurCaptured = (sample, cellName, cellValue) => {\n    let id = sample.test_id;\n    let { testResultsArr } = this.state;\n    // let newArr = [];\n    if (testResultsArr.length === 0) {\n      testResultsArr = testResultsArr.concat({\n        test_id: id,\n        [cellName]: cellValue,\n      });\n    } else {\n      let res = [];\n      testResultsArr.forEach(test => {\n        if (test.test_id === id) res.push(true);\n        else res.push(false);\n      });\n\n      if (res.includes(true)) {\n        testResultsArr.map(a =>\n          a.test_id === id ? (a[cellName] = cellValue) : a\n        );\n      } else {\n        testResultsArr = testResultsArr.concat({\n          test_id: id,\n          [cellName]: cellValue,\n        });\n      }\n    }\n    this.setState({ testResultsArr });\n  };\n\n  render() {\n    const { req, mode, cancel } = this.props\n    const {\n      // resultModalOpen,\n      // previewModalOpen,\n      // toggleResultModal,\n      // togglePreviewModal,\n      // saveLabResults,\n      onStatusChange,\n      onStatusUnchanged,\n      // currentReq,\n      saveCollectedSamples,\n      saveResults,\n      onBlurCaptured,\n    } = this;\n    const { requestForThisPatient } = this.state;\n    \n\n    return (\n      <Suspense fallback={<Loading />}>\n      <p>{mode}</p>\n        {//   requestForThisPatient.length === 0 ? (\n        //   <p className=\"text-center\">No record found</p>\n        // ) :\n        mode === 'pending' ? (\n          <PendingRequestProcess\n            requests={requestForThisPatient}\n            // resultModalOpen={resultModalOpen}\n            // previewModalOpen={previewModalOpen}\n            // toggleResultModal={toggleResultModal}\n            // togglePreviewModal={togglePreviewModal}\n            // saveLabResults={saveLabResults}\n            onStatusChange={onStatusChange}\n            onStatusUnchanged={onStatusUnchanged}\n            saveCollectedSamples={saveCollectedSamples}\n            cancel={cancel}\n            // currentReq={requestForThisPatient}\n            req={req}\n          />\n        ) : mode === 'collected' ? (\n          <SampleAnalysis\n            saveResults={saveResults}\n            currentReq={requestForThisPatient}\n            onBlurCaptured={onBlurCaptured}\n            cancel={cancel}\n          />\n        ) : mode === 'analyzed' ? ( \n          <PathologistComment currentReq={requestForThisPatient} cancel={cancel} />\n        ) : (\n          // ) : mode === 'commented' ? (\n          //   <\n          // <SampleAnalysis currentReq={requestForThisPatient} />\n          <p>Record not found</p>\n        )}\n      </Suspense>\n    );\n  }\n}\n\nconst PatientDetails = ({ userDetails = [], currentReq = {} }) => (\n  <div className=\"form-group\">\n    <label className=\"col-md-4\" style={{ textAlign: 'left' }}>\n      Patient:{' '}\n    </label>\n    <label className=\"col-md-6\" style={{ textAlign: 'left' }}>\n      {userDetails.surname} {userDetails.firstname}\n    </label>\n    <label className=\"col-md-4\" style={{ textAlign: 'left' }}>\n      Test:{' '}\n    </label>\n    <label className=\"col-md-6\" style={{ textAlign: 'left' }}>\n      {currentReq.test}\n    </label>\n    <label className=\"col-md-4\" style={{ textAlign: 'left' }}>\n      Sample:{' '}\n    </label>\n    <label className=\"col-md-6\" style={{ textAlign: 'left' }}>\n      {currentReq.sample}\n    </label>\n  </div>\n);\n\nexport class ResultModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: '',\n      appearance: '',\n      microscopy: '',\n      culture: '',\n      antibiotic: '',\n      warning: '',\n    };\n  }\n  onInputChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n      warning: '',\n    });\n  };\n\n  saveLabResults = e => {\n    e.preventDefault();\n    const { result, appearance, microscopy, culture, antibiotic } = this.state;\n    if (\n      result === '' &&\n      appearance === '' &&\n      microscopy === '' &&\n      culture === '' &&\n      antibiotic === ''\n    )\n      return this.setState({ warning: 'All fields cannot be left blank' });\n\n    const formData = { result, appearance, microscopy, culture, antibiotic };\n    this.props.saveLabResults(formData);\n    this.clearText();\n  };\n\n  clearText = () =>\n    this.setState({\n      result: '',\n      appearance: '',\n      microscopy: '',\n      culture: '',\n      antibiotic: '',\n    });\n\n  render() {\n    const {\n      resultModalOpen,\n      toggleResultModal,\n      currentReq,\n      userDetails,\n    } = this.props;\n    const {\n      result,\n      appearance,\n      microscopy,\n      culture,\n      antibiotic,\n      warning,\n    } = this.state;\n    return (\n      <Modal isOpen={resultModalOpen} toggle={toggleResultModal}>\n        <ModalHeader toggle={toggleResultModal}>Add Result</ModalHeader>\n        <ModalBody>\n          <form onSubmit={this.saveLabResults}>\n            <PatientDetails currentReq={currentReq} userDetails={userDetails} />\n            <label className=\"col-md-3 control-label\">Result:</label>\n            <input\n              name=\"result\"\n              className=\"form-control col-md-9\"\n              value={result}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Appearance:</label>\n            <input\n              name=\"appearance\"\n              className=\"form-control col-md-9\"\n              value={appearance}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Microscopy:</label>\n            <input\n              name=\"microscopy\"\n              className=\"form-control col-md-9\"\n              value={microscopy}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Culture:</label>\n            <input\n              name=\"culture\"\n              className=\"form-control col-md-9\"\n              value={culture}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Antibiotic:</label>\n            <input\n              name=\"antibiotic\"\n              className=\"form-control col-md-9\"\n              value={antibiotic}\n              onChange={this.onInputChange}\n            />\n\n            {warning && (\n              <span className=\"alert alert-danger text-center offset-md-4\">\n                {warning}\n              </span>\n            )}\n            <hr />\n            <input\n              type=\"submit\"\n              className=\"btn btn-outline-success offset-md-5\"\n              value=\"Save Result\"\n            />\n          </form>\n        </ModalBody>\n      </Modal>\n    );\n  }\n}\n\nconst Result = ({ result, appearance, microscopy, culture, antibiotic }) => {\n  const divideStyle = {\n    margin: '.7em',\n    width: '50%',\n  };\n  const labelStyle = {\n    textAlign: 'left',\n    width: '30%',\n  };\n  const valStyle = {\n    textAlign: 'left',\n    width: '70%',\n  };\n  return (\n    <div>\n      <h2>Lab Test Result</h2>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Result: </label>\n        <label style={valStyle}>{result}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Appearance: </label>\n        <label style={valStyle}>{appearance}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Microscopy: </label>\n        <label style={valStyle}>{microscopy}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Culture: </label>\n        <label style={valStyle}>{culture}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Antibiotic: </label>\n        <label style={valStyle}>{antibiotic}</label>\n      </div>\n    </div>\n  );\n};\n\nconst PrintPreview = ({\n  req,\n  userDetails,\n  previewModalOpen,\n  togglePreviewModal,\n}) => {\n  const onPrintClick = () => {\n    window.frames[\n      'print_frame'\n    ].document.body.innerHTML = document.getElementById('labResult').innerHTML;\n    window.frames['print_frame'].window.focus();\n    window.frames['print_frame'].window.print();\n  };\n  return (\n    <Modal size=\"lg\" isOpen={previewModalOpen} toggle={togglePreviewModal}>\n      <ModalHeader toggle={togglePreviewModal}>Add Result</ModalHeader>\n      <ModalBody>\n        <div id=\"labResult\">\n          {/* <PatientInfo req={req} userDetails={userDetails} /> */}\n          <Result\n            result=\"cleared\"\n            appearance=\"cleared\"\n            microscopy=\"cleared\"\n            culture=\"cleared\"\n            antibiotic=\"cleared\"\n          />\n        </div>\n        <iframe name=\"print_frame\" width=\"0\" height=\"0\" src=\"about:blank\" />\n        <button className=\"btn btn-outline-success\" onClick={onPrintClick}>\n          Print\n        </button>\n      </ModalBody>\n    </Modal>\n  );\n};\n","/home/tafa/Desktop/gest_hosp_front/src/components/Labo/CompletedLabTests.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/PathologistComment.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/PrintResult.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/SampleReception.js",["264"],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/PatientAssignedToday.js",["265"],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/DoctorsListModal.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/PatientForm.js",["266"],"/home/tafa/Desktop/gest_hosp_front/src/components/loading.js",["267"],"/home/tafa/Desktop/gest_hosp_front/src/components/Account/ServicesSetupForm.js",["268"],"/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/EditDrugs.js",["269"],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/AssignedList.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/DressingRequestForm.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/PcomplaintsForm.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/EditPrescriptionRequest.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/SysExaminationEdit.js",["270","271"],"import React, {Component} from 'react';\nimport { Form, FormGroup, Modal, ModalBody, ModalFooter, ModalHeader, Button, Container } from 'reactstrap';\nimport { Link} from 'react-router-dom';\nimport { FaArrowRight, FaArrowLeft } from 'react-icons/fa';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass SysExaminationEdit extends Component {\n  constructor(props) {\n    super(props);\n\n    const cachedData = JSON.parse(localStorage.getItem('system_examination')) || [];\n\n    this.state = {\n        palor: cachedData.palor || \"\",\n        dehydration: cachedData.dehydration || \"\",\n        generalexamination: cachedData.generalexamination || \"\",\n        mss: cachedData.mss || \"\",\n        cvs: cachedData.cvs || \"\",\n        abdomen: cachedData.abdomen || \"\",\n        respiratory: cachedData.respiratory || \"\",\n        otherSysExamination: cachedData.otherSysExamination || \"\",\n        cns: cachedData.cns || \"\",\n        eye_opening: cachedData.eye_opening || 0,\n        BVR: cachedData.BVR || 0,\n        BMR: cachedData.BMR || 0,\n        gcs: cachedData.gcs || 0,\n        RUL: cachedData.RUL || 0,\n        LUL: cachedData.LUL || 0,\n        RLL: cachedData.RLL || 0,\n        LLL: cachedData.LLL || 0,\n        formRecords:[],\n        modal: false\n    };\n  } \n\n  handleSubmit=(e)=>{\n    e.preventDefault();\n    const { palor, dehydration, generalexamination, mss, cvs, abdomen, respiratory, \n        otherSysExamination, cns, eye_opening, BVR, BMR, RUL, LUL, RLL, LLL } = this.state;\n    const formData = { palor, dehydration, generalexamination, mss, cvs, abdomen, respiratory, \n        otherSysExamination, cns, eye_opening, BVR, BMR, RUL, LUL, RLL, LLL, gcs: parseInt(eye_opening)+parseInt(BVR)+parseInt(BMR) };\n    if(palor===\"\" && dehydration===\"\" && generalexamination===\"\" && mss===\"\" && cvs===\"\" && abdomen===\"\" && respiratory===\"\" && \n        otherSysExamination===\"\" && cns===\"\" && eye_opening===0 && BVR===0 && BMR===0 && RUL===0 && LUL===0 && RLL===0 && LLL===0) return;\n    return localStorage.setItem('system_examination', JSON.stringify(formData));\n  }\n\n  onInputChange=(e)=>{\n    this.setState({ [e.target.name]: e.target.value})\n  }\n\n  toggle=()=>{\n    this.setState(prevState => ({ modal: !prevState.modal }));\n  }\n\n  \n    render(){\n        const { palor, generalexamination, mss, cvs, abdomen, cns, respiratory, otherSysExamination, \n            dehydration, eye_opening, BVR, BMR, RUL, LUL, RLL, LLL, gcs } = this.state;\n        return(\n            <div>\n                <Form>\n                    <h3 className=\"text-center\"><strong>System Examination</strong></h3>\n                    <hr />\n                    <FormGroup row>\n                        <label className=\"col-md-2\">Palor:</label>\n                        <div className=\"col-md-4\">\n                            <input type=\"radio\" className=\"col-md-1\" name=\"palor\" value='none' checked={palor==='none'} onChange={this.onInputChange}/>None\n                            <input type=\"radio\" className=\"col-md-1\" name=\"palor\" value='+1' checked={palor==='+1'} onChange={this.onInputChange}/>+1\n                            <input type=\"radio\" className=\"col-md-1\" name=\"palor\" value='+2' checked={palor==='+2'} onChange={this.onInputChange}/>+2\n                            <input type=\"radio\" className=\"col-md-1\" name=\"palor\" value='+3' checked={palor==='+3'} onChange={this.onInputChange}/>+3\n                        </div>\n                        <label className=\"col-md-2\">Dehydration:</label>\n                        <div className=\"col-md-4\">\n                            <input type=\"radio\" className=\"col-md-1\" name=\"dehydration\" value='none' checked={dehydration==='none'} onChange={this.onInputChange}/>None\n                            <input type=\"radio\" className=\"col-md-1\" name=\"dehydration\" value='+1' checked={dehydration==='+1'} onChange={this.onInputChange}/>+1\n                            <input type=\"radio\" className=\"col-md-1\" name=\"dehydration\" value='+2' checked={dehydration==='+2'} onChange={this.onInputChange}/>+2\n                            <input type=\"radio\" className=\"col-md-1\" name=\"dehydration\" value='+3' checked={dehydration==='+3'} onChange={this.onInputChange}/>+3\n                        </div>\n                    </FormGroup>\n                    {/* <FormGroup row>\n                        <label className=\"col-md-2\">General Examination:</label>\n                        <textarea name=\"generalexamination\" onChange={this.onInputChange} value={generalexamination} className=\"form-control col-md-4\" ></textarea>\n                        <label className=\"col-md-2\">MSS:</label>\n                        <textarea name=\"mss\" onChange={this.onInputChange} value={mss}  className=\"form-control col-md-4\"></textarea>\n                    </FormGroup> */}\n                    <FormGroup row>\n                        <label className=\"col-md-2\">CVS:</label>\n                        <input name=\"cvs\" onChange={this.onInputChange} value={cvs} className=\"form-control col-md-4\" />\n                        <label className=\"col-md-2\">Abdomen:</label>\n                        <input name=\"abdomen\" onChange={this.onInputChange} value={abdomen}  className=\"form-control col-md-4\" />\n                    </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-2\">Respiratory:</label>\n                        <input  className=\"form-control col-md-4\" name=\"respiratory\" onChange={this.onInputChange} value={respiratory} />\n                        <label className=\"col-md-2\">Others:</label>\n                        <input name=\"otherSysExamination\" onChange={this.onInputChange} value={otherSysExamination}  className=\"form-control col-md-4\" />          \n                    </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-2\">CNS:</label>\n                        <input name=\"cns\" onChange={this.onInputChange} value={cns}  className=\"form-control col-md-4\" />\n                    </FormGroup>\n                </Form>\n                <button className=\"btn btn-primary col-md-2 offset-md-5\" onClick={this.toggle}>More</button>\n                <SystemExamModal \n                    modal={this.state.modal} \n                    toggle={this.toggle} \n                    eye_opening = {eye_opening} \n                    BVR = {BVR} BMR = {BMR} \n                    RUL = {RUL} LUL = {LUL} \n                    RLL = {RLL} LLL = {LLL}\n                    gcs = {gcs}\n                    onInputChange={this.onInputChange}\n                />\n                <div className=\"row\" style={{marginTop: '8em'}}>\n                    <Link to=\"/patient_clarking/previous_medical_history\" className=\"btn btn-outline-success\" style={{width:'9vw'}}><FaArrowLeft /> Prev</Link>\n                    <button onClick={this.handleSubmit} className=\"btn btn-outline-success offset-md-7\"><Link to='/patient_clarking/problems' style={{width:'9vw'}}>Next <FaArrowRight /></Link></button>\n                </div> \n            </div>\n        )\n    }\n}\n\nexport default SysExaminationEdit;\n\nconst SystemExamModal = ({ modal, toggle, eye_opening, BVR, BMR, RUL, LUL, RLL, LLL, gcs, onInputChange }) => {\n        return (\n            <Modal size=\"lg\" isOpen={modal} toggle={toggle} >\n                <ModalHeader toggle={toggle}>Preview Diagnosis</ModalHeader>\n                <ModalBody>\n                    <Container>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">Eye Opening:</label>\n                        <div className=\"col-md-8 row\">\n                            <div className=\"col-md-2\"><input type=\"radio\"  name=\"eye_opening\" value='1' checked={eye_opening==='1'} onChange={onInputChange}/>1</div>\n                            <div className=\"col-md-2\"><input type=\"radio\"  name=\"eye_opening\" value='2' checked={eye_opening==='2'} onChange={onInputChange}/>2</div>\n                            <div className=\"col-md-2\"><input type=\"radio\"  name=\"eye_opening\" value='3' checked={eye_opening==='3'} onChange={onInputChange}/>3</div>\n                            <div className=\"col-md-2\"><input type=\"radio\"  name=\"eye_opening\" value='4' checked={eye_opening==='4'} onChange={onInputChange}/>4</div>\n                        </div>\n                        </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">Best Verbal Response:</label>\n                        <div className=\"col-md-8 row\">\n                            <div className=\"col-md-2\">\n                            <input type=\"radio\"  name=\"BVR\" value='1' checked={BVR==='1'} onChange={onInputChange}/>1</div>\n                            <div className=\"col-md-2\">\n                            <input type=\"radio\"  name=\"BVR\" value='2' checked={BVR==='2'} onChange={onInputChange}/>2</div>\n                            <div className=\"col-md-2\">\n                            <input type=\"radio\"  name=\"BVR\" value='3' checked={BVR==='3'} onChange={onInputChange}/>3</div>\n                            <div className=\"col-md-2\">\n                            <input type=\"radio\"  name=\"BVR\" value='4' checked={BVR==='4'} onChange={onInputChange}/>4</div>\n                            <div className=\"col-md-2\">\n                            <input type=\"radio\"  name=\"BVR\" value='5' checked={BVR==='5'} onChange={onInputChange}/>5</div>\n\n                        </div>\n                    </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">Best Motor Response:</label>\n                        <div className=\"col-md-8 row\">\n                        <div className=\"col-md-2\"><input type=\"radio\"  name=\"BMR\" value='1' checked={BMR==='1'} onChange={onInputChange}/>1</div>\n                        <div className=\"col-md-2\"> <input type=\"radio\"  name=\"BMR\" value='2' checked={BMR==='2'} onChange={onInputChange}/>2</div>\n                        <div className=\"col-md-2\">  <input type=\"radio\"  name=\"BMR\" value='3' checked={BMR==='3'} onChange={onInputChange}/>3</div>\n                        <div className=\"col-md-2\">  <input type=\"radio\"  name=\"BMR\" value='4' checked={BMR==='4'} onChange={onInputChange}/>4</div>\n                        <div className=\"col-md-2\">  <input type=\"radio\"  name=\"BMR\" value='5' checked={BMR==='5'} onChange={onInputChange}/>5</div>\n                        <div className=\"col-md-2\">  <input type=\"radio\"  name=\"BMR\" value='6' checked={BMR==='6'} onChange={onInputChange}/>6</div>\n                        </div>\n                        </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">GCS:</label>\n                        <input \n                            type=\"text\" \n                            className=\"form-control col-md-4\" \n                            name=\"gcs\" \n                            value={`${parseInt(eye_opening)+parseInt(BVR)+parseInt(BMR)}/15`} \n                            disabled\n                            onChange={onInputChange} />\n                    </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">Right Upper Limb:</label>\n                        <div className=\"col-md-8 row\">\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RUL\" value='0/5' checked={RUL==='0/5'} onChange={onInputChange}/>0/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RUL\" value='1/5' checked={RUL==='1/5'} onChange={onInputChange}/>1/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RUL\" value='2/5' checked={RUL==='2/5'} onChange={onInputChange}/>2/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RUL\" value='3/5' checked={RUL==='3/5'} onChange={onInputChange}/>3/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RUL\" value='4/5' checked={RUL==='4/5'} onChange={onInputChange}/>4/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RUL\" value='5/5' checked={RUL==='5/5'} onChange={onInputChange}/>5/5</div>\n                        </div>\n                        </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">Left Upper Limb:</label>\n                        <div className=\"col-md-8 row\">\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LUL\" value='0/5' checked={LUL==='0/5'} onChange={onInputChange}/>0/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LUL\" value='1/5' checked={LUL==='1/5'} onChange={onInputChange}/>1/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LUL\" value='2/5' checked={LUL==='2/5'} onChange={onInputChange}/>2/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LUL\" value='3/5' checked={LUL==='3/5'} onChange={onInputChange}/>3/5</div>\n                           <div className=\"col-md-2\"> <input type=\"radio\" name=\"LUL\" value='4/5' checked={LUL==='4/5'} onChange={onInputChange}/>4/5</div>\n                           <div className=\"col-md-2\"> <input type=\"radio\" name=\"LUL\" value='5/5' checked={LUL==='5/5'} onChange={onInputChange}/>5/5</div>\n                        </div>\n                    </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">Right Lower Limb:</label>\n                        <div className=\"col-md-8 row\">\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RLL\" value='0/5' checked={RLL==='0/5'} onChange={onInputChange}/>0/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RLL\" value='1/5' checked={RLL==='1/5'} onChange={onInputChange}/>1/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RLL\" value='2/5' checked={RLL==='2/5'} onChange={onInputChange}/>2/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RLL\" value='3/5' checked={RLL==='3/5'} onChange={onInputChange}/>3/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RLL\" value='4/5' checked={RLL==='4/5'} onChange={onInputChange}/>4/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"RLL\" value='5/5' checked={RLL==='5/5'} onChange={onInputChange}/>5/5</div>\n                        </div>\n                        </FormGroup>\n                    <FormGroup row>\n                        <label className=\"col-md-4\">Left Lower Limb:</label>\n                        <div className=\"col-md-8 row\">\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LLL\" value='0/5' checked={LLL==='0/5'} onChange={onInputChange}/>0/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LLL\" value='1/5' checked={LLL==='1/5'} onChange={onInputChange}/>1/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LLL\" value='2/5' checked={LLL==='2/5'} onChange={onInputChange}/>2/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LLL\" value='3/5' checked={LLL==='3/5'} onChange={onInputChange}/>3/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LLL\" value='4/5' checked={LLL==='4/5'} onChange={onInputChange}/>4/5</div>\n                            <div className=\"col-md-2\"><input type=\"radio\" name=\"LLL\" value='5/5' checked={LLL==='5/5'} onChange={onInputChange}/>5/5</div>\n                        </div>\n                    </FormGroup>\n                    </Container>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" onClick={toggle} >Save</Button> \n                </ModalFooter>\n            </Modal>  \n        )\n}","/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/Pharmacy.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/PreviousVisits.js",["272","273","274"],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/PatientClarking.js",["275","276","277"],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/NewRadiologyInvestigations.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/PendingPharmacyRequest.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/AddDrug.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/PrescriptionProcessingForm.js",["278","279"],"import React, { Component } from 'react';\nimport {\n  Card,\n  CardBody,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n} from 'reactstrap';\nimport FreeScrollBar from 'react-free-scrollbar';\nimport Loading from '../loading';\nimport {\n  _fetchData,\n  _postData,\n  _customNotify,\n  _warningNotify,\n  _updateData\n} from '../helpers/helpers';\nimport Notifications from 'react-notify-toast';\n\nexport default class PrescriptionProcessingForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // the inital state is being set here\n    this.state = {\n      // userDetails: {},\n      prescriptions: [],\n      quantityDispensed: [],\n      price: [],\n      total: 0,\n      addDrugMmodal: false,\n      changeDrugModal: false,\n      drugList: [],\n      searchTerm: '',\n      validationText: '',\n      drugToChange: '',\n      prescriptionByIdErr: '',\n      drugListErr: '',\n      drugDetails: {\n        drug: '',\n        quantity: '',\n        price: '',\n        prescription: '',\n      },\n    };\n  }\n\n  // fetchUserDetails(id) {\n  //   let self = this;\n\n  //   let route = `patientrecords/fetchUserById?id=${id}`;\n  //   let cb = data => {\n  //     self.setState({ userDetails: Object.assign({}, data[0]) });\n  //   };\n  //   _fetchData({ route, callback: cb });\n  // }\n\n  fetchPrescription(id) {\n    let route = `prescriptionrequests/getPrescriptionById?id=${id}`;\n    let success_callback = data => this.setState({ prescriptions: data });\n      \n    let error_callback = error => this.setState({ prescriptionByIdErr: error });\n\n    _fetchData({ route, success_callback, error_callback });\n  }\n\n  fetchDrugList = () => {\n    let route = `drugs/allDrugs`;\n    let success_callback = data => this.setState({ drugList: data });\n    let error_callback = error => this.setState({ drugListErr: error });\n\n    _fetchData({ route, success_callback, error_callback });\n  };\n\n  componentDidMount() {\n    let id = this.props.details.id;\n    // this.fetchUserDetails(id);\n    this.fetchPrescription(id);\n    this.fetchDrugList();\n  }\n\n  /**\n   * onQuantityDispensedInputChange()\n   * Does major calculations when the quantity of the drugs\n   * to be dispensed changes and updates the state of the neccessary\n   * changes.\n   */\n  onQuantityDispensedInputChange = (e, price, i) => {\n    let value = e.target.value;\n    let initialPrice = this.state.price;\n    initialPrice[i] = price * value;\n    let quantityDispensed = this.state.quantityDispensed;\n    quantityDispensed[i] = value;\n    let total = initialPrice.reduce((a, b) => a + b);\n    // console.log(total);\n    this.setState({\n      quantityDispensed,\n      price: initialPrice,\n      total,\n    });\n  };\n\n  onQuantityDispensed = (e, prescription, i) => {\n    let value = parseInt(e.target.value);\n    let { prescriptions } = this.state;\n    let newPres = Object.assign({}, prescription, {\n      quantity_dispensed: value,\n    });\n    prescriptions[i] = newPres;\n    // console.log(prescriptions)\n    this.setState({ prescriptions });\n  };\n\n  toggle = () => {\n    this.setState(prevState => ({ addDrugMmodal: !prevState.addDrugMmodal }));\n  };\n\n  /**\n   * The following four methods onDrugChange(), onQuantityChange(), onPrescriptionChange()\n   * onPriceChange() takes care of the onChange event of the Add Drug Form\n   */\n  onDrugChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, { drug: value }),\n    });\n  };\n\n  onQuantityChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, {\n        quantity: value,\n      }),\n    });\n  };\n\n  onPrescriptionChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, {\n        prescription: value,\n      }),\n    });\n  };\n\n  onPriceChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, { price: value }),\n    });\n  };\n\n  /**\n   * updatePrescriptionList()\n   * Updates the prescription list accordingly with the newly\n   * passed in drug.\n   */\n  updatePrescriptionList = data => {\n    let prescriptionList = this.state.prescriptions;\n    let newPrescriptionList = prescriptionList.concat(data);\n    this.setState({ prescriptions: newPrescriptionList });\n  };\n\n  /**\n   * addDrug()\n   * Takes care of adding drug to the drugs list, it submits\n   * the newly added drug to the database, does validation before\n   * taking any action, also updates the state so that the changes\n   * can reflect without having to reload the browser.\n   */\n  addDrug = () => {\n    //gets the values of the new form from the state\n    let { prescription, price, drug, quantity } = this.state.drugDetails;\n    // gets basic details about the patient which would be appended to the request\n    const { details } = this.props;\n    // performs the validation\n    if (prescription === '' || price === '' || drug === '' || quantity === '') {\n      return this.setState({ validationText: 'Please fill all the fields' });\n    }\n\n    // all the data about the new drug to be added, id = patient's id\n    let data = {\n      id: details.id,\n      dosage: prescription,\n      drug_status: 'pending',\n      date: new Date(),\n      price,\n      drug,\n      seen_by: details.seen_by,\n      quantity,\n    };\n    // the submission to the database is done here\n    let route = 'prescriptionrequests/addDrugWithQuantity';\n    let cb = () => console.log(data);\n    _postData({ route, data, cb });\n    this.updatePrescriptionList(data);\n    _customNotify('Drug added Successfully');\n    this.toggle();\n  };\n\n  /**\n   * toggleDrugModal()\n   * Toggles the modal containing the list of all drugs\n   */\n  toggleDrugModal = () => {\n    this.setState(prevState => ({\n      changeDrugModal: !prevState.changeDrugModal,\n    }));\n  };\n\n  dispense(prescription) {\n    let { patient_id, drug_request_id, quantity_dispensed} = prescription;\n    //submit dispension\n    let route = 'prescriptionrequests/dispenseSingle';\n    let data = {patient_id,  drug_request_id, quantity_dispensed }\n    let callback = () => _customNotify(\"record submitted\")\n    _updateData({ route, data, callback })\n    //reduce the quantity in stock\n    //reduce the patient's balance\n\n  }\n\n  /**\n   * handleDispense()\n   * event handler for dispense button click\n   * Submits the data and dispenses drugs to the customers\n   */\n  handleDispense = () => {\n    const { prescriptions } = this.state;\n    prescriptions.forEach(prescription => this.dispense(prescription))\n\n    // let quantity = this.state.quantityDispensed;\n    // if (!quantity.length)\n    //   return _warningNotify('Empty form cannot be Submitted!');\n\n    // prescriptions.forEach((p, i) => (p.quantity = quantity[i]));\n    // let result = {}\n    // for(let i=0; i<prescriptions.length; i++){\n    //   result[prescriptions[i].drug_request_id] = quantityDispensed[i]\n    // }\n    // this.props.dispenseDrugs(prescriptions);\n    // console.log(quantityDispensed);\n    // let route = 'prescriptionrequests/dispenseSingle';\n    // let newList = []\n  \n    // newList.push(prescriptions.map(obj => obj.drug_request_id),prescriptions.map(obj => obj.quantity_dispensed))\n    // let data = \n    // let callback = () => _customNotify(\"record submitted\")\n    // _updateData({ route, data: prescriptions, callback })\n    // console.log(prescriptions)\n  };\n\n  changeDrug = drugDetails => {\n    let { drugToChange, prescriptions } = this.state;\n    // console.log(`Please change ${drugToChange} to ${drug.drug} on ${prescriptions}`);\n    // let newPrescription = prescriptions.map(p => {\n    //     p.drug === drugToChange ? p = Object.assign({}, p, {drug: drug.drug}) : p\n    // })\n    let newDrugsList = prescriptions.map(item =>\n      item.drug === drugToChange\n        ? (item = Object.assign({}, item, {\n            drug: drugDetails.drug,\n            price: drugDetails.price,\n          }))\n        : item\n    );\n    // console.log(newDrugsList);\n    this.setState({ prescriptions: newDrugsList });\n    // change the drugToChange to the newly selected drug\n    // _customNotify(\"Drug replaced successfully!\")\n    this.toggleDrugModal();\n  };\n\n  onSearchTermChange = e => {\n    let searchTerm = e.target.value;\n    this.setState({ searchTerm: searchTerm });\n    // this.search(searchTerm);\n  };\n\n  search = searchTerm => {\n    let drugList = this.state.drugList;\n    let newList = drugList.filter(drug => drug.drug === searchTerm);\n    this.setState({ drugList: newList });\n  };\n\n  openChangeDrugTable = drug => {\n    this.setState({ drugToChange: drug });\n    this.toggleDrugModal();\n  };\n\n  render() {\n    const { details, toggleProcessingForm } = this.props;\n    const {\n      userDetails,\n      drugList,\n      drugDetails,\n      validationText,\n      prescriptions,\n      prescriptionByIdErr,\n    } = this.state;\n    const {\n      onDrugChange,\n      onQuantityChange,\n      onPriceChange,\n      onPrescriptionChange,\n      addDrug,\n    } = this;\n    const { drug, quantity, price, prescription } = drugDetails;\n    const rows = [];\n    prescriptions.forEach((prescription, i) => {\n      rows.push(\n        <tr key={i}>\n          <td>\n            <span\n              onClick={() => this.openChangeDrugTable(prescription.drug)}\n              className=\"anchor\"\n              title=\"change this drug\">\n              {prescription.drug}\n            </span>\n          </td>\n          <td>{prescription.dosage}</td>\n          {/* <td>fdds{prescription.drug_request_jd}</td> */}\n\n          <td>{prescription.price}</td>\n          <td>\n            <input\n              type=\"text\"\n              name=\"quantityDispensed\"\n              className=\"form-control\"\n              // value={this.state.quantityDispensed[i]}\n              value={prescription.quantity_dispensed}\n              onFocus={e => e.target.value = ''}\n              onChange={\n                e =>\n                  // this.onQuantityDispensedInputChange(e, prescription.price, i)\n                  this.onQuantityDispensed(e, prescription, i)\n                // console.log(prescription.quantityDispensed)\n              }\n            />\n          </td>\n          {/* <td>{this.state.price[i]}</td> */}\n          \n          {/* <td>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.dispense(prescription)}>\n              Dispense\n            </button>\n          </td> */}\n        </tr>\n      );\n    });\n\n    return (\n      <>\n        <form className=\"row\">\n          <div className=\"form-group col-md-2\">\n            <label style={{marginRight:'.5em'}}>ID: </label>\n            <strong>{details.id}</strong>\n          </div>\n          <div className=\"form-group col-md-4\">\n            <label style={{marginRight:'.5em'}}>Nom: </label>\n            <strong>{`${details.surname} ${details.firstname}`}</strong>\n          </div>\n          <div className=\"form-group col-md-2\">\n            <label style={{marginRight:'.5em'}}>Sexe: </label>\n            <strong>{details.gender}</strong>\n          </div>\n          <div className=\"form-group col-md-4\">\n            <label style={{marginRight:'.5em'}}>Date De Naissance:</label>\n            <strong>{details.DOB}</strong>\n          </div>\n        </form>\n\n        <br />\n\n        <h5 className=\"text-center\">Medicamentsen attente</h5>\n\n        {/* <div style={{ width: '100%', height: '28vh' }}>\n              <FreeScrollBar> */}\n        {!prescriptions.length ? (\n          !prescriptionByIdErr.length ? (\n            <Loading />\n          ) : (\n            <p className=\"text-center\">\n              <em>No record found</em>\n            </p>\n          )\n        ) : (\n          <Table striped bordered hover responsive>\n            <thead>\n              <tr>\n                <th>Medicaments</th>\n                <th>Prescription</th>\n                <th>Prix Unitaire</th>\n                <th>Quantité Administrée</th>\n                {/* <th>Price</th> */}\n                {/* <th>Dispense</th> */}\n              </tr>\n            </thead>\n            <tbody>\n              {rows}\n              {/* <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <th>Total</th>\n                        <th>{this.state.total}</th>\n                      </tr> */}\n            </tbody>\n          </Table>\n        )}\n        {/* </FreeScrollBar>\n            </div> */}\n\n        <button\n          className=\"btn btn-outline-primary btnS offset-xs-1 offset-sm-2 offset-md-3\"\n          onClick={this.handleDispense}>\n          Dispense\n        </button>\n\n        <button\n          className=\"btn btn-outline-success offset-xs-1 offset-sm-1 offset-md-1\"\n          title=\"Add a drug to the list\"\n          onClick={this.toggle}>\n          Ajouter Medicaments\n        </button>\n\n        <button\n          className=\"btn btn-outline-danger offset-xs-1 offset-sm-1 offset-md-1\"\n          title=\"close\"\n          onClick={toggleProcessingForm}>\n          Fermer\n        </button>\n\n        <Modal size=\"lg\" isOpen={this.state.addDrugMmodal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>Ajouter Medicaments</ModalHeader>\n          <ModalBody>\n            <Card>\n              <CardBody>\n                <AddDrugForm\n                  drug={drug}\n                  quantity={quantity}\n                  price={price}\n                  prescription={prescription}\n                  onDrugChange={onDrugChange}\n                  onQuantityChange={onQuantityChange}\n                  onPriceChange={onPriceChange}\n                  onPrescriptionChange={onPrescriptionChange}\n                  addDrug={addDrug}\n                  validationText={validationText}\n                />\n              </CardBody>\n            </Card>\n          </ModalBody>\n        </Modal>\n        <Modal\n          isOpen={this.state.changeDrugModal}\n          toggle={this.toggleDrugModal}>\n          <ModalHeader toggle={this.toggleDrugModal}>\n            Changer ce Medicament\n          </ModalHeader>\n          <ModalBody>\n            <SearchBar\n              searchTerm={this.state.searchTerm}\n              onSearchTermChange={this.onSearchTermChange}\n            />\n            <DrugsTable\n              searchTerm={this.state.searchTerm}\n              changeDrug={this.changeDrug}\n              drugList={drugList}\n            />\n          </ModalBody>\n        </Modal>\n      </>\n    );\n  }\n}\n\nconst AddDrugForm = ({\n  drug,\n  quantity,\n  price,\n  prescription,\n  onDrugChange,\n  onQuantityChange,\n  onPriceChange,\n  onPrescriptionChange,\n  addDrug,\n  validationText,\n}) => (\n  <form>\n    <div className=\"row\">\n      <label className=\"col-md-2\">Medicaments</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={drug}\n        onChange={onDrugChange}\n      />\n      <label className=\"col-md-2\">Quantité</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={quantity}\n        onChange={onQuantityChange}\n      />\n    </div>\n    <br />\n    <div className=\"row\">\n      <label className=\"col-md-2\">Prix</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={price}\n        onChange={onPriceChange}\n      />\n      <label className=\"col-md-2\">Prescription</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={prescription}\n        onChange={onPrescriptionChange}\n      />\n    </div>\n    <p style={{ color: 'red' }}>{validationText}</p>\n    <button\n      onClick={e => {\n        e.preventDefault();\n        addDrug();\n      }}\n      className=\"btn btn-outline-secondary\">\n      Ajouter\n    </button>\n  </form>\n);\n\nconst SearchBar = ({ searchTerm, onSearchTermChange }) => (\n  <div>\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      placeholder=\"search for a drug by name\"\n      value={searchTerm}\n      onChange={onSearchTermChange}\n    />\n  </div>\n);\n\nconst DrugsTable = ({ drugList, changeDrug, searchTerm }) => {\n  let rows = [];\n  drugList.forEach((drug, i) => {\n    if (drug.drug.toLowerCase().indexOf(searchTerm.toLowerCase()) === -1) {\n      return;\n    }\n\n    rows.push(\n      <tr\n        key={i}\n        onClick={() => changeDrug(drug)}\n        style={{ cursor: 'pointer' }}>\n        <td>{drug.drug}</td>\n        <td>{drug.quantity}</td>\n        <td>{drug.price}</td>\n      </tr>\n    );\n  });\n  return (\n    <div style={{ width: '100%', height: '50vh' }}>\n      <FreeScrollBar>\n        <Notifications options={{ zIndex: 200, top: '50px' }} />\n        <Table hover bordered>\n          <thead>\n            <tr>\n              <th>Nom</th>\n              <th>Quantité En Stock</th>\n              <th>Prix</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </Table>\n      </FreeScrollBar>\n    </div>\n  );\n};\n","/home/tafa/Desktop/gest_hosp_front/src/nav-old.js",["280","281","282","283","284"],"/home/tafa/Desktop/gest_hosp_front/src/error-boundary/MyErrorBoundary.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Account/Account.js",["285"],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/RenderPatientList.js",["286"],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/Diagnosis.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/DispensaryTable.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/ObservationRequestForm.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/DiagnosticCode.js",["287"],"/home/tafa/Desktop/gest_hosp_front/src/components/Doctor/NewProblems.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/landing.js",["288"],"/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/PharmacyDashboard.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Pharmacy/SalesReport.js",["289"],"/home/tafa/Desktop/gest_hosp_front/src/components/Admin/AdminDashboard.js",["290","291","292","293","294","295","296"],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/PatientTable.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Records/SearchBar.js",[],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/LabDashboard.js",["297","298","299","300","301","302","303","304"],"/home/tafa/Desktop/gest_hosp_front/src/components/Labo/LaboratorySetupForms.js",[],{"ruleId":"305","severity":1,"message":"306","line":11,"column":3,"nodeType":"307","messageId":"308","endLine":11,"endColumn":10},{"ruleId":"305","severity":1,"message":"309","line":122,"column":11,"nodeType":"307","messageId":"308","endLine":122,"endColumn":15},{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"305","severity":1,"message":"314","line":11,"column":3,"nodeType":"307","messageId":"308","endLine":11,"endColumn":15},{"ruleId":"305","severity":1,"message":"315","line":3,"column":22,"nodeType":"307","messageId":"308","endLine":3,"endColumn":31},{"ruleId":"316","severity":1,"message":"317","line":215,"column":23,"nodeType":"318","endLine":215,"endColumn":37},{"ruleId":"316","severity":1,"message":"317","line":225,"column":23,"nodeType":"318","endLine":225,"endColumn":37},{"ruleId":"316","severity":1,"message":"317","line":235,"column":23,"nodeType":"318","endLine":235,"endColumn":38},{"ruleId":"316","severity":1,"message":"317","line":245,"column":23,"nodeType":"318","endLine":245,"endColumn":35},{"ruleId":"305","severity":1,"message":"319","line":5,"column":22,"nodeType":"307","messageId":"308","endLine":5,"endColumn":33},{"ruleId":"305","severity":1,"message":"320","line":52,"column":24,"nodeType":"307","messageId":"308","endLine":52,"endColumn":32},{"ruleId":"305","severity":1,"message":"321","line":53,"column":31,"nodeType":"307","messageId":"308","endLine":53,"endColumn":45},{"ruleId":"305","severity":1,"message":"322","line":106,"column":7,"nodeType":"307","messageId":"308","endLine":106,"endColumn":11},{"ruleId":"305","severity":1,"message":"323","line":69,"column":46,"nodeType":"307","messageId":"308","endLine":69,"endColumn":53},{"ruleId":"305","severity":1,"message":"324","line":70,"column":13,"nodeType":"307","messageId":"308","endLine":70,"endColumn":15},{"ruleId":"305","severity":1,"message":"325","line":70,"column":42,"nodeType":"307","messageId":"308","endLine":70,"endColumn":48},{"ruleId":"305","severity":1,"message":"326","line":70,"column":70,"nodeType":"307","messageId":"308","endLine":70,"endColumn":75},{"ruleId":"305","severity":1,"message":"327","line":70,"column":77,"nodeType":"307","messageId":"308","endLine":70,"endColumn":85},{"ruleId":"305","severity":1,"message":"319","line":8,"column":35,"nodeType":"307","messageId":"308","endLine":8,"endColumn":46},{"ruleId":"305","severity":1,"message":"328","line":48,"column":13,"nodeType":"307","messageId":"308","endLine":48,"endColumn":25},{"ruleId":"305","severity":1,"message":"329","line":48,"column":48,"nodeType":"307","messageId":"308","endLine":48,"endColumn":53},{"ruleId":"305","severity":1,"message":"330","line":52,"column":7,"nodeType":"307","messageId":"308","endLine":52,"endColumn":21},{"ruleId":"305","severity":1,"message":"319","line":5,"column":3,"nodeType":"307","messageId":"308","endLine":5,"endColumn":14},{"ruleId":"305","severity":1,"message":"331","line":6,"column":3,"nodeType":"307","messageId":"308","endLine":6,"endColumn":17},{"ruleId":"305","severity":1,"message":"332","line":7,"column":3,"nodeType":"307","messageId":"308","endLine":7,"endColumn":24},{"ruleId":"305","severity":1,"message":"333","line":52,"column":18,"nodeType":"307","messageId":"308","endLine":52,"endColumn":29},{"ruleId":"305","severity":1,"message":"334","line":54,"column":7,"nodeType":"307","messageId":"308","endLine":54,"endColumn":18},{"ruleId":"305","severity":1,"message":"335","line":55,"column":7,"nodeType":"307","messageId":"308","endLine":55,"endColumn":22},{"ruleId":"305","severity":1,"message":"336","line":56,"column":7,"nodeType":"307","messageId":"308","endLine":56,"endColumn":23},{"ruleId":"305","severity":1,"message":"337","line":57,"column":7,"nodeType":"307","messageId":"308","endLine":57,"endColumn":17},{"ruleId":"310","replacedBy":"338"},{"ruleId":"312","replacedBy":"339"},{"ruleId":"305","severity":1,"message":"315","line":9,"column":3,"nodeType":"307","messageId":"308","endLine":9,"endColumn":12},{"ruleId":"305","severity":1,"message":"340","line":100,"column":9,"nodeType":"307","messageId":"308","endLine":100,"endColumn":14},{"ruleId":"305","severity":1,"message":"341","line":101,"column":9,"nodeType":"307","messageId":"308","endLine":101,"endColumn":11},{"ruleId":"305","severity":1,"message":"342","line":410,"column":7,"nodeType":"307","messageId":"308","endLine":410,"endColumn":19},{"ruleId":"343","severity":1,"message":"344","line":437,"column":9,"nodeType":"345","endLine":437,"endColumn":77},{"ruleId":"305","severity":1,"message":"346","line":27,"column":9,"nodeType":"307","messageId":"308","endLine":27,"endColumn":23},{"ruleId":"347","severity":1,"message":"348","line":12,"column":1,"nodeType":"349","endLine":101,"endColumn":2},{"ruleId":"305","severity":1,"message":"322","line":13,"column":9,"nodeType":"307","messageId":"308","endLine":13,"endColumn":13},{"ruleId":"350","severity":1,"message":"351","line":7,"column":3,"nodeType":"345","endLine":12,"endColumn":5},{"ruleId":"305","severity":1,"message":"352","line":3,"column":3,"nodeType":"307","messageId":"308","endLine":3,"endColumn":7},{"ruleId":"353","severity":1,"message":"354","line":15,"column":3,"nodeType":"355","messageId":"356","endLine":17,"endColumn":4},{"ruleId":"305","severity":1,"message":"357","line":58,"column":24,"nodeType":"307","messageId":"308","endLine":58,"endColumn":42},{"ruleId":"305","severity":1,"message":"358","line":58,"column":44,"nodeType":"307","messageId":"308","endLine":58,"endColumn":47},{"ruleId":"305","severity":1,"message":"359","line":5,"column":8,"nodeType":"307","messageId":"308","endLine":5,"endColumn":17},{"ruleId":"360","severity":1,"message":"361","line":24,"column":11,"nodeType":"345","endLine":24,"endColumn":47},{"ruleId":"305","severity":1,"message":"362","line":46,"column":28,"nodeType":"307","messageId":"308","endLine":46,"endColumn":41},{"ruleId":"305","severity":1,"message":"363","line":2,"column":10,"nodeType":"307","messageId":"308","endLine":2,"endColumn":13},{"ruleId":"305","severity":1,"message":"364","line":12,"column":10,"nodeType":"307","messageId":"308","endLine":12,"endColumn":15},{"ruleId":"305","severity":1,"message":"365","line":114,"column":9,"nodeType":"307","messageId":"308","endLine":114,"endColumn":30},{"ruleId":"305","severity":1,"message":"331","line":16,"column":3,"nodeType":"307","messageId":"308","endLine":16,"endColumn":17},{"ruleId":"305","severity":1,"message":"334","line":296,"column":7,"nodeType":"307","messageId":"308","endLine":296,"endColumn":18},{"ruleId":"305","severity":1,"message":"366","line":41,"column":7,"nodeType":"307","messageId":"308","endLine":41,"endColumn":12},{"ruleId":"305","severity":1,"message":"367","line":42,"column":7,"nodeType":"307","messageId":"308","endLine":42,"endColumn":16},{"ruleId":"305","severity":1,"message":"368","line":43,"column":7,"nodeType":"307","messageId":"308","endLine":43,"endColumn":14},{"ruleId":"305","severity":1,"message":"369","line":44,"column":7,"nodeType":"307","messageId":"308","endLine":44,"endColumn":14},{"ruleId":"305","severity":1,"message":"370","line":45,"column":7,"nodeType":"307","messageId":"308","endLine":45,"endColumn":15},{"ruleId":"305","severity":1,"message":"371","line":2,"column":8,"nodeType":"307","messageId":"308","endLine":2,"endColumn":22},{"ruleId":"305","severity":1,"message":"372","line":4,"column":8,"nodeType":"307","messageId":"308","endLine":4,"endColumn":17},{"ruleId":"305","severity":1,"message":"373","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":26},{"ruleId":"374","severity":1,"message":"375","line":7,"column":9,"nodeType":"345","endLine":7,"endColumn":47},{"ruleId":"353","severity":1,"message":"354","line":14,"column":3,"nodeType":"355","messageId":"356","endLine":16,"endColumn":4},{"ruleId":"305","severity":1,"message":"376","line":2,"column":10,"nodeType":"307","messageId":"308","endLine":2,"endColumn":15},{"ruleId":"305","severity":1,"message":"306","line":2,"column":17,"nodeType":"307","messageId":"308","endLine":2,"endColumn":24},{"ruleId":"305","severity":1,"message":"377","line":73,"column":7,"nodeType":"307","messageId":"308","endLine":73,"endColumn":14},{"ruleId":"305","severity":1,"message":"333","line":74,"column":7,"nodeType":"307","messageId":"308","endLine":74,"endColumn":18},{"ruleId":"305","severity":1,"message":"378","line":76,"column":7,"nodeType":"307","messageId":"308","endLine":76,"endColumn":16},{"ruleId":"305","severity":1,"message":"379","line":77,"column":7,"nodeType":"307","messageId":"308","endLine":77,"endColumn":14},{"ruleId":"305","severity":1,"message":"380","line":78,"column":7,"nodeType":"307","messageId":"308","endLine":78,"endColumn":11},{"ruleId":"305","severity":1,"message":"376","line":2,"column":10,"nodeType":"307","messageId":"308","endLine":2,"endColumn":15},{"ruleId":"305","severity":1,"message":"306","line":2,"column":17,"nodeType":"307","messageId":"308","endLine":2,"endColumn":24},{"ruleId":"305","severity":1,"message":"381","line":8,"column":7,"nodeType":"307","messageId":"308","endLine":8,"endColumn":21},{"ruleId":"305","severity":1,"message":"377","line":119,"column":7,"nodeType":"307","messageId":"308","endLine":119,"endColumn":14},{"ruleId":"305","severity":1,"message":"333","line":120,"column":7,"nodeType":"307","messageId":"308","endLine":120,"endColumn":18},{"ruleId":"305","severity":1,"message":"378","line":122,"column":7,"nodeType":"307","messageId":"308","endLine":122,"endColumn":16},{"ruleId":"305","severity":1,"message":"379","line":123,"column":7,"nodeType":"307","messageId":"308","endLine":123,"endColumn":14},{"ruleId":"305","severity":1,"message":"380","line":124,"column":7,"nodeType":"307","messageId":"308","endLine":124,"endColumn":11},"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","no-native-reassign",["382"],"no-negated-in-lhs",["383"],"'CardSubtitle' is defined but never used.","'_postData' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'_updateData' is defined but never used.","'patients' is assigned a value but never used.","'onRequestClick' is assigned a value but never used.","'date' is assigned a value but never used.","'details' is assigned a value but never used.","'id' is assigned a value but never used.","'gender' is assigned a value but never used.","'tribe' is assigned a value but never used.","'religion' is assigned a value but never used.","'requestsList' is assigned a value but never used.","'error' is assigned a value but never used.","'onPatientClick' is assigned a value but never used.","'_warningNotify' is defined but never used.","'_convertArrOfObjToArr' is defined but never used.","'toggleRoute' is assigned a value but never used.","'userDetails' is assigned a value but never used.","'resultModalOpen' is assigned a value but never used.","'previewModalOpen' is assigned a value but never used.","'currentReq' is assigned a value but never used.",["382"],["383"],"'route' is assigned a value but never used.","'cb' is assigned a value but never used.","'PrintPreview' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'error_callback' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Form' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'generalexamination' is assigned a value but never used.","'mss' is assigned a value but never used.","'SearchBar' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'currentRecord' is assigned a value but never used.","'Col' is defined but never used.","'error' is defined but never used.","'presenting_complaints' is assigned a value but never used.","'admin' is assigned a value but never used.","'insurance' is assigned a value but never used.","'profile' is assigned a value but never used.","'account' is assigned a value but never used.","'username' is assigned a value but never used.","'PatientDeposit' is defined but never used.","'PropTypes' is defined but never used.","'Component' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'Route' is defined but never used.","'isRoute' is assigned a value but never used.","'fetchData' is assigned a value but never used.","'setMode' is assigned a value but never used.","'mode' is assigned a value but never used.","'SampleAnalysis' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]